define(function() { return {"advanced/CustomCell.html":{"title":"Customized ListView","intro":"<p>This demo shows how to use a <a href=\"../api/ListView.html\">jidejs/ui/control/ListView</a> with a slightly customized appearance.</p>","html":"","js":"require([\n    'jidejs/base/ObservableList', 'jidejs/ui/control/ListView', 'jidejs/ui/control/Cell'\n], function(ObservableList, ListView, Cell) {\n    // create the initial data\n    var todo = new ObservableList([\n        { title: 'Buy vegetables', priority: 'High', description: 'I really need to buy vegetables for tomorrow.' },\n        { title: 'Clean house', priority: 'High', description: 'Cleaning the house never hurts, does it?' },\n        { title: 'Pay rent', priority: 'Med', description: \"Needs to be done by next week, don't forget it!\" },\n        { title: 'Buy new computer', priority: 'Low', description: 'Mine is pretty good, but new is always better!' }\n    ]);\n\n    var priorityToClass = {\n        'High': 'label-important',\n        'Med': 'label-warning',\n        'Low': 'label-info'\n    };\n\n    // create a ListView for the people\n    var list = new ListView({\n        classList: ['inverse', 'is-striped'],\n        items: todo,\n        cellFactory: function() {\n            return new Cell({\n                updateItem: function(todo) {\n                  this.text = [\n                    '<div class=\"media\">',\n        '<a class=\"pull-left\" href=\"#\">',\n            '<span class=\"label &apos;+priorityToClass[todo.priority]+&apos;\">'+todo.priority+'</span>',\n            '</a>',\n        '<div class=\"media-body\">',\n            '<h4 class=\"media-heading\">'+todo.title+'</h4>',\n            '<p>'+todo.description+'</p>',\n            '</div>',\n        '</div>'\n                  ].join(\"\");\n                }\n            });\n        }\n    });\n\n    // select the first item in the list\n    list.selectionModel.selectFirst();\n\n    // add the 'element' of the ListView to the DOM\n    root.appendChild(list.element);\n});","about":"<p><a href=\"../api/ListView.html\">jidejs/ui/control/ListView</a> is a very powerful control that can be fully customized by changing\n        the <a href=\"../api/Cell.html\">jidejs/ui/control/Cell</a> used to render its items.</p>\n    <p>This is still a very basic example of what can be done with a ListView. You could also embed entire <a href=\"../api/Component.html\">jidejs/ui/Component</a>s\n    inside a <a href=\"../api/Cell.html\">jidejs/ui/control/Cell</a>.</p>"},"advanced/GridPane.html":{"title":"GridPane","intro":"<p>This demo shows how to use the powerful <a href=\"../api/GridPane.html\">jidejs/ui/layout/GridPane</a> layout.</p>","html":"","js":"require([\n\t'jidejs/ui/control/Button',\n\t'jidejs/ui/control/TitledPane',\n\t'jidejs/ui/control/HTMLView',\n\t'jidejs/ui/control/Hyperlink',\n\t'jidejs/ui/control/Popup',\n\t'jidejs/ui/control/TextField',\n\t'jidejs/ui/Pos',\n\t'jidejs/ui/control/TextArea',\n\t'jidejs/ui/control/ComboBox',\n\t'jidejs/ui/control/Label',\n\t'jidejs/ui/layout/GridPane',\n\t'jidejs/ui/layout/VBox'\n],\nfunction(\n\tButton, TitledPane, HTMLView, Hyperlink,\n\tPopup, TextField, Pos, TextArea, ComboBox, Label,\n\tGridPane, VBox\n) {\n\t\"use strict\";\n\n\tvar area = GridPane.area;\n\tvar grid = new GridPane({\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tgrid: [\n\t\t\t'header  header header',\n\t\t\t'sidebar .      content',\n\t\t\t'footer  footer footer'\n\t\t],\n\t\tcolumnDefinition: '250px 5px 1fr',\n\t\trowDefinition: 'auto 1fr auto',\n\t\tchildren: [\n\t\t\tarea(new HTMLView({\n\t\t\t\tcontent: '<h1>jide.js - Grid layout demo</h1>'\n\t\t\t}), 'header'),\n\t\t\tarea(new VBox({\n\t\t\t\tchildren: [\n\t\t\t\t\tnew TitledPane({\n\t\t\t\t\t\ttitle: \"About\",\n\t\t\t\t\t\twidth: '100%',\n                        classList: ['inverse'],\n\t\t\t\t\t\tcontent: new HTMLView({\n                          style: { padding: '5px' },\n                          content: '<p>This demo shows how to use the jide.js GridPane to layout a simple page'+\n        'and a form.</p>'\n                          })\n\t\t\t\t\t}),\n\t\t\t\t\tnew TitledPane({\n\t\t\t\t\t\ttitle: 'Things to try',\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\tcontent: new HTMLView({\n                          style: { padding: '5px' },\n                          content: '<p>Resize the browser.</p>'\n                        })\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}), 'sidebar'),\n\t\t\tarea(new GridPane({\n\t\t\t\tstyle: {\n\t\t\t\t\twidth: '300px',\n\t\t\t\t\theight: '100%',\n                  \tmargin: '0 10px'\n\t\t\t\t},\n\t\t\t\t/*grid: [\n\t\t\t\t\t'a . b b',\n\t\t\t\t\t'. . . .',\n\t\t\t\t\t'c . d d',\n\t\t\t\t\t'. . . .',\n\t\t\t\t\t'e e e e',\n\t\t\t\t\t'. . . .',\n\t\t\t\t\t'f f f f',\n\t\t\t\t\t'. . . .',\n\t\t\t\t\t'. . . i'\n\t\t\t\t],*/\n\t\t\t\tcolumnDefinition: 'auto 10px 1fr auto',\n\t\t\t\trowDefinition: 'auto 10px auto 10px auto 10px 1fr 10px auto',\n\t\t\t\tchildren: [\n\t\t\t\t\tarea(new Label({\n\t\t\t\t\t\ttext: 'Recipient',\n                      style: { 'line-height': '20px', 'padding': '5px 0 0 0' },\n\t\t\t\t\t\t'GridPane.position': { row : 1, column: 1 }\n\t\t\t\t\t}), 'a'),\n\t\t\t\t\tarea(new TextField({\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t'GridPane.position': { row : 1, column: 3, colspan: 2 }\n\t\t\t\t\t}), 'b'),\n\t\t\t\t\tarea(new Label({\n\t\t\t\t\t\ttext: 'Title',\n                      style: { 'line-height': '20px', 'padding': '5px 0 0 0' },\n\t\t\t\t\t\t'GridPane.position': { row : 3, column: 1 }\n\t\t\t\t\t}), 'c'),\n\t\t\t\t\tarea(new TextField({\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t'GridPane.position': { row : 3, column: 3, colspan: 2 }\n\t\t\t\t\t}), 'd'),\n\t\t\t\t\tarea(new Label({\n\t\t\t\t\t\ttext: 'Message',\n\t\t\t\t\t\t'GridPane.position': { row : 5, column: 1, colspan: 4 }\n\t\t\t\t\t}), 'e'),\n\t\t\t\t\tarea(new TextArea({\n\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\theight: '100%',\n\t\t\t\t\t\t'GridPane.position': { row : 7, column: 1, colspan: 4 }\n\t\t\t\t\t}), 'f'),\n\t\t\t\t\tarea(new Button({\n\t\t\t\t\t\ttext:'Send',\n                        classList: ['inverse'],\n\t\t\t\t\t\t'GridPane.position': { row : 9, column: 4 }\n\t\t\t\t\t}), 'i'),\n\t\t\t\t]\n\t\t\t}), 'content'),\n\t\t\tarea(new Hyperlink({\n\t\t\t\ttext: 'Copyright &copy; '+(new Date().getFullYear())+' JIDE Software, INC',\n\t\t\t\thref: 'http://www.jidesoft.com'\n\t\t\t}), 'footer')\n\t\t]\n\t});\n\troot.appendChild(grid.element);\n});","about":"<p><a href=\"../api/GridPane.html\">jidejs/ui/layout/GridPane</a> is a very powerful layout pane that can be used to create many different types of\n        layouts.</p>\n    <p>This demo shows how to use the jide.js GridPane to layout a simple page and a form.</p>"},"events/EventEmitter.html":{"title":"EventEmitter","intro":"<p>This demo shows how to use an <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a> to dispatch and listen to events.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/EventEmitter'], function(EventEmitter) {\n    // Create an EventEmitter\n    var eventBus = new EventEmitter();\n\n    // now listen to an event\n    eventBus.on('fileopen', function(filename) {\n        log('Opened file '+filename);\n    });\n\n    // listen to the \"all\" event for status updates\n    eventBus.on('all', function(eventname) {\n        log('Status changed: '+Array.prototype.join.call(arguments, \", \"));\n    });\n\n    // emit an event\n    eventBus.emit('fileopen', 'index.html');\n\n    // emit another event that we do not explicitly listen to\n    eventBus.emit('change:file', 'changed.html', 'index.html');\n\n    // this utility function appends an entry to our visible log\n    function log(msg) {\n        root.querySelector('#xlog').appendChild(function() {\n            var li = document.createElement('li');\n            li.innerHTML = msg;\n            return li;\n        }());\n    }\n});","about":"<p>The <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a> is a central part of every <code>jide.js</code> application.\n    It proves highly useful not only as a mixin for the model layer but also as the very backbone of an application.</p>\n    <p>The concept of using an <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a> as a central module that allows highly decoupled\n        communication between different modules is called an <code>EventBus</code>. Due to using the\n        <abbr title=\"Asynchronous Module Definition\">AMD</abbr> format, it is possible to define a central\n        <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a> as a module that can be consumed by other modules.</p>\n    <p>Note that every <a href=\"../api/Observable.html\">jidejs/base/Observable</a> is also an <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a>.</p>"},"events/Observable.html":{"title":"Observable","intro":"<p>This demo shows how to use <a href=\"../api/Observable.html\">jidejs/base/Observable</a>s as value containers and provides an introduction\r\n        to the concept of computed observables.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/Observable'], function(Observable) {\r\n    // first create an observable value\r\n    var x = Observable(2);\r\n    // let's log its value\r\n    // to access the current value of any observable object, we use the `get` method.\r\n    log(\"<b>x</b>: \"+x.get());\r\n    // now create a computed observable\r\n    var square = Observable.computed(function() {\r\n        return x.get() * x.get();\r\n    });\r\n    // and retrieve its value\r\n    log(\"<b>square</b>: \"+square.get());\r\n\r\n    // it is important to note that the value of a computed observable is only computed when its value is actually\r\n    // read\r\n    var timesTwo = Observable.computed(function() {\r\n        log(\"Computing <em>timesTwo</em>\");\r\n        return 2 * x.get();\r\n    });\r\n    log(\"Before computing timesTwo\");\r\n    log(\"Now timesTwo has been computed: \"+timesTwo.get());\r\n\r\n    // change the value of x and log the new values\r\n    x.set(4);\r\n    log(\"<b>x</b>: \"+x.get());\r\n    log(\"<b>square</b>: \"+square.get());\r\n    log(\"<b>timesTwo</b>: \"+timesTwo.get());\r\n\r\n    // create a writable calculated observable\r\n    var writableTimesTwo = Observable.computed({\r\n      read: function() { // define accessor\r\n        return 2*x.get();\r\n      },\r\n      write: function(value) { // define mutator\r\n        x.set(value / 2);\r\n      }\r\n    });\r\n    log(\"<b>writableTimesTwo</b>: \"+writableTimesTwo.get());\r\n    writableTimesTwo.set(4);\r\n    log(\"<b>x</b>: \"+x.get());\r\n    log(\"<b>writableTimesTwo</b>: \"+writableTimesTwo.get());\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p>When using an <a href=\"../api/Observable.html\">jidejs/base/Observable</a>, remember that you can access its value using the\r\n        <a href=\"../api/Observable.html#get\">jidejs/base/Observable~get</a> method and that you can change its value using the\r\n    <a href=\"../api/Observable.html#set\">jidejs/base/Observable~set</a> method.</p>\r\n    <p>A <code>computed</code> observable will only recalculate its value when one of the observables it depends on has\r\n    changed. It will also calculate its value lazily, which means that its value will not be calculated before it is actually\r\n    accessed.</p>\r\n    <p>Observables are a great way to encapsulate the state of an application if it fits into a single object.</p>\r\n    <p>In fact, the application that powers this website is built around two observables: The requested example id and\r\n    the actual example object which contains all necessary data to generate the UI of the application.</p>\r\n    <p>To learn how to get informed when the value of an observable changes, please take a look at the\r\n        <a href=\"#!/events/Subscription.html\">Subscription</a> example.</p>"},"events/ObservableList.html":{"title":"ObservableList","intro":"<p>This demo shows how to use an <a href=\"../api/ObservableList.html\">jidejs/base/ObservableList</a> to store a collection of data.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/ObservableList'], function(ObservableList) {\r\n    // create a list of people, we represent a person as a string to keep the example small\r\n    var people = new ObservableList();\r\n\r\n    // add some people\r\n    people.add('George', 'Patrick', 'David', 'John', 'Sarah');\r\n\r\n    log(people.toArray().join(', '));\r\n\r\n    // now remove John\r\n    people.removeAt(3);\r\n    log(people.toArray().join(', '));\r\n\r\n    // and now let's remove George\r\n    people.remove('George');\r\n    log(people.toArray().join(', '));\r\n\r\n    // and insert them back\r\n    people.insertAt(2, 'John', 'George');\r\n    log(people.toArray().join(', '));\r\n\r\n    // constantly having to log the changes get's boring, listen to the changes instead\r\n    function changeLogger(event) {\r\n        // log the new contents of the list\r\n        log('The people list was changed: '+people.toArray().join(', '));\r\n        // and now list the changes\r\n        var changes = event.enumerator();\r\n        while(changes.moveNext()) {\r\n            var change = changes.current;\r\n            if(change.isUpdate) {\r\n                log('<b>Update</b>: '+change.oldValue+' => '+change.newValue);\r\n            } else if(change.isDelete) {\r\n                log('<b>Delete</b>: '+change.oldValue);\r\n            } else if(change.isInsert) {\r\n                log('<b>Insert</b>: '+change.newValue);\r\n            }\r\n        }\r\n    }\r\n    people.on('change', changeLogger);\r\n\r\n    // and change the list again\r\n    people.splice(2, 1, 'Jessica', 'Naomi');\r\n\r\n    // we can also sort the list:\r\n    var sortedPeople = people.sort(function(firstPerson, secondPerson) {\r\n      return firstPerson.localeCompare(secondPerson);\r\n    });\r\n\r\n    // ignore changes to the original list now\r\n    people.removeListener('change', changeLogger);\r\n\r\n    // and listen to the sorted list instead\r\n    sortedPeople.on('change', changeLogger);\r\n\r\n    // sortedPeople is actually a jidejs/base/Collection so we can't modify it directly, but we can still change the original\r\n    // list:\r\n    people.splice(0, 2, 'Michael', 'Peter', 'Xavier');\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p>Whenever you need to store a collection of objects that should be observable, you should consider to use a\r\n    <a href=\"../api/Collection.html\">jidejs/base/Collection</a> or an <a href=\"../api/ObservableList.html\">jidejs/base/ObservableList</a> instead of an array.</p>\r\n    <p>The <a href=\"../api/Collection.html\">jidejs/base/Collection</a> API provides detailed change events and the power to create sorted, filtered,\r\n    transformed and grouped collections of the data stored within them that are automatically updated when the original\r\n    collection changed.</p>\r\n    <p>To get comfortable with <a href=\"../api/ObservableList.html\">jidejs/base/ObservableList</a>, as you really should be, try to modify the example so\r\n        that the list contains an actual Person object with name and age properties and use <a href=\"../api/Collection.html#filter\">jidejs/base/Collection~filter</a>\r\n    to filter the list to contain only people below 40. In order to see the result, you might need to implement a\r\n        <code>toString</code> method for your Person object.</p>"},"events/Properties.html":{"title":"Observable properties","intro":"<p>This demo shows how to use <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a> in the <em>ViewModel</em> or <em>Model</em> layer\n        of your application.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/ObservableProperty'], function(ObservableProperty) {\n    // Note: You could use any class framework you like, in fact, jide.js provides the jidejs/base/Class module\n    // that can be used to define Javascript classes with a slightly nicer syntax but jide.js does not require to use\n    // any specific class framework.\n\n    // using ObservableProperty.install saves us from having to include a lot of repetitive code\n    // like creating a new ObservableProperty and adding accessors and mutators for each of them.\n    // Of course you could also directly access them using the `get` and `set` methods but using fields is\n    // easier to read and write.\n    var installProperties = ObservableProperty.install(Person, 'firstName', 'lastName');\n    // define our Person class\n    function Person(firstName, lastName) {\n        // use the installer created by ObservableProperty.install to initialize `firstNameProperty`\n        // and `lastNameProperty` fields on our new Person object\n        installProperties(this);\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    // Create a new person\n    var john = new Person('John', 'Doe');\n\n    // now we've got choices on how to listen to changes.\n    // Using ObservableProperty requires your data object to be an EventEmitter. The `install` method takes\n    // care of mixin in the EventEmitter automatically, thus we can simply listen to the appropriate events:\n    john.on('change:firstName', function(event) {\n        log(event.oldValue+\"'s <b>first name</b> was changed to \"+event.value);\n    });\n\n    // or we can subscribe to the ObservableProperty itself\n    john.lastNameProperty.subscribe(function(event) {\n        log(john.firstName+\" \"+event.oldValue+\" has a new last name: \"+event.value);\n    });\n\n    // and now change the first and last name of John\n    john.firstName = 'Max'; // using field mutator\n    john.lastNameProperty.set('Mustermann'); // or using the property\n\n    // this utility function appends an entry to our visible log\n    function log(msg) {\n        root.querySelector('#xlog').appendChild(function() {\n            var li = document.createElement('li');\n            li.innerHTML = msg;\n            return li;\n        }());\n    }\n});","about":"<p>A central part of every application is the concept of notifying the View when the Model (or ViewModel) has been changed.</p>\n    <p>Since not every application can contain its data in a simple, <a href=\"../api/Observable.html\">jidejs/base/Observable</a> object, jide.js\n    also provides the concept of <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a> &mdash; a property of an object that is\n    observable.</p>\n    <p>As opposed to <a href=\"../api/Observable.html\">jidejs/base/Observable</a>, the <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a> does not mixin an\n    <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a>. Instead, the object it belongs to is expected to mixin <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a>.</p>\n    <p>Throughout <em>jide.js</em>, most of the properties provided by our controls use <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a>\n    to store the information the view needs, such as the text displayed by a button or the content of a popup.</p>\n    <p>It is common practice to add a suffic of <i>Property</i> to the fields containing the actual\n        <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a> and to provide a field that updates the property when its mutated (using\n    getters and setters as specified in the EcmaScript 5 specification, i.e. by using <code>Object.defineProperty</code>).\n    Since all that requires a certain amount of boilerplate, it is advisable to use the\n        <code>install</code> method instead. This also makes your application future-proof for\n    the time when browsers support the new <code>Object.observe</code> method.</p>"},"events/Subscription.html":{"title":"Subscription","intro":"<p>This demo shows how to listen to changes in <a href=\"../api/Observable.html\">jidejs/base/Observable</a> objects.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/Observable'], function(Observable) {\r\n    // first create some observable values\r\n    var x = Observable(2),\r\n        square = Observable.computed(function() {\r\n            return x.get() * x.get();\r\n        });\r\n\r\n    // if square is never read, its dependencies are not calculated and thus we are ever notified when its value changes\r\n  \tsquare.get();\r\n\r\n    // now listen to changes in x and square\r\n    x.subscribe(function(event) {\r\n        log('<b>x</b> changed: newValue = '+event.value+'; oldValue='+event.oldValue);\r\n    });\r\n\r\n    square.subscribe(function() {\r\n      // since \"square\" is a computed observable, it doesn't pass its new value to its subscribers,\r\n      // instead, you need to manually recalculate it when necessary\r\n      log('<b>square</b> changed: '+square.get());\r\n    });\r\n\r\n    // listen to the change only once\r\n    var listenOnce = x.subscribe(function() {\r\n      log('<b>Only once</b>: x changed to '+x.get());\r\n    }).onlyOnce();\r\n\r\n    // provide a binding context\r\n    var myObject = { name: 'Universe' };\r\n    var boundSubscription = square.subscribe(function() {\r\n      log('Hello '+this.name+\", you're now \"+square.get()+\" years old!\");\r\n    }).bind(myObject);\r\n\r\n    // now, finally, change the value of x\r\n    x.set(100);\r\n\r\n    // and change it again, to verify that \"Only once\" is not logged again\r\n    x.set(1000);\r\n\r\n    // dispose the bound subscription to remove it from the property, it will not be notified again\r\n    boundSubscription.dispose();\r\n\r\n    // prove it\r\n    x.set(42);\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p><a href=\"../api/Subscription.html\">jidejs/base/Subscription</a>s are a powerful tool to listen to changes in <a href=\"../api/Observable.html\">jidejs/base/Observable</a>s.\r\n    When you listen to an event from an <a href=\"../api/EventEmitter.html\">jidejs/base/EventEmitter</a> you also get a <a href=\"../api/Subscription.html\">jidejs/base/Subscription</a>\r\n    in return. It is a good practice to always call <a href=\"../api/Subscription.html#dispose\">jidejs/base/Subscription~dispose</a> on a subscription that\r\n    you no longer need to make sure that all participating objects can be garbage collected by the browser.</p>\r\n    <p>As an alternative to <a href=\"../api/Subscription.html\">jidejs/base/Subscription</a> you can also manually remove a listener from an event source\r\n    using <a href=\"../api/Observable.html#unsubscribe\">jidejs/base/Observable~unsubscribe</a> or <a href=\"../api/EventEmitter.html#removeListener\">jidejs/base/EventEmitter~removeListener</a>.</p>"},"controls/Button.html":{"title":"Using Buttons","intro":"<p>This demo shows how to use a <a href=\"../api/Button.html\">jidejs/ui/control/Button</a>.</p>","html":"<button id=\"exampleButton\"></button>","js":"// use AMD/require.js to load the Button control\nrequire(['jidejs/ui/control/Button'], function(Button) {\n    // create a new Button\n    new Button({\n        // in this case: Select a DOM element\n        element: root.querySelector('#exampleButton'),\n        // specify the text that should be shown for the button\n        text: 'Hello World!',\n        // add the 'action' event handler\n        onaction: function() {\n            // simply show an alert\n            alert('Hello World!');\n        }\n    });\n});","about":"<p>This demo shows how to use a <a href=\"../api/Button.html\">jidejs/ui/control/Button</a>.</p>\n        <p>To get started, try to modify the value of the <code>text</code> property and press\n            the <b>Run</b> button.</p>"},"controls/ListView.html":{"title":"ListView","intro":"<p>This demo shows how to use a <a href=\"../api/ListView.html\">jidejs/ui/control/ListView</a>. ListView is a very powerful control and\n    this example shows only a very limited set of its features.</p>","html":"","js":"require([\n    'jidejs/base/ObservableList', 'jidejs/ui/control/ListView'\n], function(ObservableList, ListView) {\n    // create the initial data\n    var people = new ObservableList([\n        'John Doe',\n        'Santa Claus',\n        'Jane Doe',\n        'Michael Doe'\n    ]);\n\n    // create a ListView for the people\n    var list = new ListView({\n        items: people\n        // uncomment the following line to play with different settings\n        // , classList: ['is-striped', 'has-border']\n    });\n\n    // select the first item in the list\n    list.selectionModel.selectFirst();\n\n    // add the 'element' of the ListView to the DOM\n    root.appendChild(list.element);\n});","about":"<p><a href=\"../api/ListView.html\">jidejs/ui/control/ListView</a> is a very powerful control that can be fully customized by changing\n    the <a href=\"../api/Cell.html\">jidejs/ui/control/Cell</a> used to render its items.</p>"},"controls/TextField.html":{"title":"TextField","intro":"<p>This demo shows how to use a <a href=\"../api/TextField.html\">jidejs/ui/control/TextField</a> to let users insert text into an application.</p>","html":"","js":"require([\r\n    'jidejs/ui/control/TextField', 'jidejs/ui/control/PasswordField',\r\n    'jidejs/ui/control/Label', 'jidejs/ui/control/Button',\r\n    'jidejs/ui/layout/HBox'\r\n], function(TextField, PasswordField, Label, Button, HBox) {\r\n    var name = new TextField();\r\n    var password = new PasswordField();\r\n    // in order to get baseline alignment, we need to wrap the elements in an HBox and change its style\r\n    var box = new HBox({\r\n        spacing: '5px',\r\n        children: [\r\n            new Label({ text: 'Name' }),\r\n            name,\r\n            new Label({ text: 'Password' }),\r\n            password,\r\n            new Button({\r\n                text: 'Submit',\r\n                on: {\r\n                    action: function() {\r\n                        alert(\"You've entered the following login data: \"+name.text+\", \"+password.text);\r\n                    }\r\n                }\r\n            })\r\n        ]\r\n    });\r\n    // set styles to align the items at baseline\r\n    box.style.set('align-items', 'baseline')\r\n        .set('flex-align', 'baseline')\r\n        .set('-webkit-align-items', 'baseline')\r\n        .set('-moz-box-align', 'baseline').update();\r\n    root.appendChild(box.element);\r\n});","about":"<p>This example shows how a very simple login form could be created using <em>jide.js</em>. In order to get baseline\r\n        alignment, we've chosen to use a simple <a href=\"../api/HBox.html\">jidejs/ui/layout/HBox</a> for the controls.</p>\r\n    <p>Try to listen to changes to the <a href=\"../api/TextField.html\">jidejs/ui/control/TextField</a> or its action event, which is activated when\r\n    the user presses the 'Enter' key while the <a href=\"../api/TextField.html\">jidejs/ui/control/TextField</a> has the focus.</p>"},"controls/Tooltip.html":{"title":"Tooltips","intro":"<p>This demo shows how to use a <a href=\"../api/Tooltip.html\">jidejs/ui/control/Tooltip</a> with a <a href=\"../api/Button.html\">jidejs/ui/control/Button</a>.\r\n    Tooltips can be added to any controls using the same API.</p>","html":"","js":"require([\r\n    'jidejs/ui/control/Tooltip', 'jidejs/ui/control/Button', 'jidejs/ui/control/HTMLView'\r\n], function(Tooltip, Button, HTMLView) {\r\n    var showTooltip = new Button({\r\n        text: 'Hover to see the tooltip.',\r\n        tooltip: new Tooltip({\r\n            content: new HTMLView({\r\n                content: 'This is the tooltip. It <strong>can</strong> contain any content you want.'\r\n            })\r\n        })\r\n    });\r\n\r\n    // add the 'element' of the ListView to the DOM\r\n    root.appendChild(showTooltip.element);\r\n});","about":"<p>To specify a <a href=\"../api/Tooltip.html\">jidejs/ui/control/Tooltip</a> that should be displayed when the user moves the mouse over\r\n    a control, just assign it to the <a href=\"../api/Control.html#tooltip\">jidejs/ui/Control~tooltip</a> property.</p>\r\n    <p>Every <a href=\"../api/Control.html\">jidejs/ui/Control</a> has that property and knows how to display a tooltip.</p>\r\n    <p><span class=\"label label-important\">Important</span> Tooltips should not be the only way to discover the meaning\r\n    or usage of a control since they can't be implemented for touch interfaces such as most mobile devices.</p>"},"binding/Modifications.html":{"title":"Computed bindings","intro":"<p>This demo shows how an alternative to {@link jidejs/base/Observable~computed} by using a higher level API.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/Observable'], function(Observable) {\r\n    // create two observable value and a computed observable\r\n    var age = Observable(42),\r\n        name = Observable('John'),\r\n        computedToString = Observable.computed(function() {\r\n            return name.get() + ' is '+ age.get() + ' years old.';\r\n        });\r\n    log('Computed property way:');\r\n    log(computedToString.get());\r\n\r\n    // an alternative would be to use the `concat` method:\r\n    var fluentToString = name.concat(' is ', age, ' years old');\r\n    log('Fluent API');\r\n    log(fluentToString.get());\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p>Even though creating computed observables is easy, <em>jide.js</em> provides a fluent API that could be even\r\n        easier to use, depending on your use case.</p>"},"binding/Simple.html":{"title":"Simple binding","intro":"<p>This demo shows how to bind the value of an <a href=\"../api/Observable.html\">jidejs/base/Observable</a> to another observable.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/Observable'], function(Observable) {\r\n    // first two observable values\r\n    var x = Observable(2),\r\n        y = Observable(4),\r\n        binding;\r\n\r\n    log('Initial values');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    log('Binding y to x');\r\n    binding = y.bind(x);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get()); // the value of y is now the same as the value of x\r\n\r\n    log('Change x');\r\n    x.set(42);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // the binding is one way only, changing y doesn't change x\r\n    log('Change y');\r\n    y.set(11);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // it is also possible to first convert the value\r\n    // we start by disposing the old binding\r\n    binding.dispose();\r\n    binding = y.bind(x, function(value) {\r\n        return 'John Doe is '+value+' years old';\r\n    });\r\n    log('Use converter');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    log('Change x again');\r\n    x.set('27');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p>It is often useful to be able to synchronize the value of two observables so that when one changes, the other one changes\r\n    as well.</p>\r\n    <p>Most often, you'll want to use this feature to bind the data of your Model to the ViewModel, especially when combined\r\n        with a converter.</p>\r\n    <p>Binding is also available when you use an <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a>.</p>"},"binding/TwoWay.html":{"title":"Bidirectional binding","intro":"<p>This demo shows how to bidirectionally bind the value of an <a href=\"../api/Observable.html\">jidejs/base/Observable</a> to another observable.</p>","html":"<ul id=\"xlog\"></ul>","js":"require(['jidejs/base/Observable'], function(Observable) {\r\n    // first two observable values\r\n    var x = Observable(2),\r\n        y = Observable(4),\r\n        binding;\r\n\r\n    log('Initial values');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    log('Binding y to x');\r\n    binding = y.bindBidirectional(x);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get()); // the value of y is now the same as the value of x\r\n\r\n    log('Change x');\r\n    x.set(42);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // the binding is bidirectional, changing y also changes x\r\n    log('Change y');\r\n    y.set(11);\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // it is also possible to first convert the value\r\n    // we start by disposing the old binding\r\n    binding.dispose();\r\n    binding = y.bindBidirectional(x, {\r\n      convertTo: function(value) {\r\n        return 'John Doe is '+value+' years old';\r\n      },\r\n      convertFrom: function(value) {\r\n        return value.match(/\\d+/)[0]\r\n      }\r\n    });\r\n    log('Use converter');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    log('Change x again');\r\n    x.set('27');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    log('Change y');\r\n    y.set('John Doe is 31 years old');\r\n    log('<b>x</b>: '+x.get());\r\n    log('<b>y</b>: '+y.get());\r\n\r\n    // this utility function appends an entry to our visible log\r\n    function log(msg) {\r\n        root.querySelector('#xlog').appendChild(function() {\r\n            var li = document.createElement('li');\r\n            li.innerHTML = msg;\r\n            return li;\r\n        }());\r\n    }\r\n});","about":"<p>Bidirectional bindings allow you to bind two observables in a way so that changing either one also changes the other.</p>\r\n    <p>In combination with a <i>converter</i> this becomes even more useful.</p>\r\n    <p>Bidirectional binding is also possible with <a href=\"../api/ObservableProperty.html\">jidejs/base/ObservableProperty</a>s.</p>"}}; });